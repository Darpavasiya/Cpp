#include <iostream>

#define MAX_SIZE 10

class Queue {
private:
    int arr[MAX_SIZE];
    int front;
    int rear;

public:
    Queue() {
        front = -1;
        rear = -1;
    }

    bool isEmpty() {
        return (front == -1 && rear == -1);
    }

    bool isFull() {
        return (rear == MAX_SIZE - 1);
    }

    void enqueue(int value) {
        if (isFull()) {
            std::cout << "Queue is full. Cannot enqueue element." << std::endl;
            return;
        }
        else if (isEmpty()) {
            front = 0;
            rear = 0;
        }
        else {
            rear++;
        }
        arr[rear] = value;
        std::cout << "Enqueued: " << value << std::endl;
    }

    void dequeue() {
        if (isEmpty()) {
            std::cout << "Queue is empty. Cannot dequeue element." << std::endl;
            return;
        }
        else if (front == rear) {
            front = -1;
            rear = -1;
        }
        else {
            front++;
        }
    }

    int peek() {
        if (isEmpty()) {
            std::cout << "Queue is empty. No element to peek." << std::endl;
            return -1;
        }
        return arr[front];
    }

    void display() {
        if (isEmpty()) {
            std::cout << "Queue is empty." << std::endl;
            return;
        }
        std::cout << "Queue elements: ";
        for (int i = front; i <= rear; i++) {
            std::cout << arr[i] << " ";
        }
        std::cout << std::endl;
    }
};

int main() {
    Queue queue;

    queue.enqueue(5);
    queue.enqueue(10);
    queue.enqueue(15);

    queue.display();

    queue.dequeue();

    queue.display();

    int frontElement = queue.peek();
    std::cout << "Front element: " << frontElement << std::endl;

    return 0;
}
In this example, a Queue class is implemented using an array. The class has member functions to check if the queue is empty or full, enqueue an element, dequeue an element, peek at the front element, and display the elements of the queue.

In the main function, queue operations are performed. Elements are enqueued using the enqueue function, and then the queue is displayed. An element is dequeued using the dequeue function, and the queue is displayed again. The front element is obtained using the peek function and displayed.

You can modify the values passed to the enqueue function and perform other queue operations to customize the program and see the output.





User
Embaded system code in c
ChatGPT
Certainly! Here's an example of an embedded system code in C that blinks an LED using a microcontroller:

c
Copy code
#include <avr/io.h>
#include <util/delay.h>

#define LED_PIN PB0

int main(void) {
    // Set LED pin as output
    DDRB |= (1 << LED_PIN);

    while (1) {
        // Toggle the LED pin
        PORTB ^= (1 << LED_PIN);

        // Delay for 500ms
        _delay_ms(500);
    }

    return 0;
}
This code is written for an AVR microcontroller and uses the AVR Libc library for register access and delay functions. The code configures a GPIO pin (PB0) as an output, and inside the infinite while loop, it toggles the LED pin using bitwise XOR and delays for 500 milliseconds using the _delay_ms function from the util/delay.h library.

You can modify the code according to your specific microcontroller and pin configuration. Make sure to include the appropriate header files and use the correct register names for your microcontroller.





User
Embaded system code for simple circuit in c
ChatGPT
Sure! Here's an example of an embedded system code in C for a simple circuit that reads the state of a switch and controls an LED:

c
Copy code
#include <avr/io.h>

#define SWITCH_PIN PD2
#define LED_PIN PD3

int main(void) {
    // Set switch pin as input and enable internal pull-up resistor
    DDRD &= ~(1 << SWITCH_PIN);
    PORTD |= (1 << SWITCH_PIN);

    // Set LED pin as output
    DDRD |= (1 << LED_PIN);

    while (1) {
        // Read the state of the switch
        if (PIND & (1 << SWITCH_PIN)) {
            // Switch is not pressed, turn off the LED
            PORTD &= ~(1 << LED_PIN);
        } else {
            // Switch is pressed, turn on the LED
            PORTD |= (1 << LED_PIN);
        }
    }

    return 0;
}
In this code, we assume that the switch is connected to pin PD2 and the LED is connected to pin PD3 of the microcontroller. The code sets the switch pin as an input and enables the internal pull-up resistor to ensure a defined state when the switch is not pressed. The LED pin is set as an output. Inside the infinite while loop, the code reads the state of the switch by checking the value of the input pin. If the switch is not pressed, the LED is turned off by clearing the LED pin. If the switch is pressed, the LED is turned on by setting the LED pin.

Again, make sure to adapt the code to your specific microcontroller and pin configuration.






